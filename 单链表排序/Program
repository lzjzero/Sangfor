#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <malloc.h>

struct node {
	int val;
	struct node *next;
};

static void list_sort(struct node *head);

struct node *list_create(int arr[], int size)
{
	struct node *head = NULL;
	int i;
	for (i = size - 1; i >= 0; --i) {
		struct node *p = (struct node *)malloc(sizeof(struct node));

		p->val = arr[i];
		p->next = head;
		head = p;
	}
	return head;
}
static void list_print(struct node *head)
{
	for (; head; head = head->next) {
		printf("%d", head->val);
		if (head->next)
			printf(" ");
	}
	printf("\n");
}
static void list_free(struct node *head)
{
	struct node *next;
	while (head) {
		next = head->next;
		free(head);
		head = next;
	}
}
static int input(int **arr, int *size)
{
	int i;
	int ret;

	ret = fscanf(stdin, "%d\n", size);
	if (ret != 1)
		return -1;
	*arr = (int *)malloc(sizeof(int) * (*size));
	for (i = 0; i < *size; ++i) {
		fscanf(stdin, "%d ", &(*arr)[i]);
	}
	return 0;
}

int main(int argc, char *argv[])
{
	struct node *head;
	int *arr = NULL;
	int size = 0;

	if (input(&arr, &size) < 0) {
		fprintf(stderr, "input error\n");
		return 0;
	}
	head = list_create(arr, size);
	list_sort(head);
	list_print(head);
	list_free(head);
	free(arr);
	return 0;
}

static void list_sort(struct node *head)
{
	//TODO:
	if (head == NULL || head->next == NULL) {
		return;                                       //链表为空或只有一个节点的时候不需要排序
	}
	struct node * cur = head;       //自定义可操作节点，这样能够保留头节点
	int size = 0;                   //链表长度
	while (cur) {
		size++;
		cur = cur->next;
	}
	cur = head;
	int temp = 0;
	for (int i = 0; i < size - 1; i++) {
		for (int j = 0; j < size - 1 - i; j++) {
			if (cur->val > cur->next->val) {
				temp = cur->val;
				cur->val = cur->next->val;
				cur->next->val = temp;
			}
			cur = cur->next;
		}
		cur = head;
	}
	return;
}
